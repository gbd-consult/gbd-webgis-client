let _subs = [];

function subscribe(msg, target, fn) {
    _subs.push([msg, target, fn]);
}

let _fns = msg => _subs.filter(m => m[0] === msg).map(m => m[2]);
let _void = x => typeof(x) === 'undefined' || x === null;

let _promisify = (fn, args) => new Promise((resolve, reject) =>
    setTimeout(() =>
            Promise
                .resolve(null)
                .then(() => fn(...args))
                .then(resolve)
                .catch(reject)
        , 0));


function publish(msg, ...args) {
    let ps = _fns(msg).map(fn => _promisify(fn, args));

    if (!ps.length) {
        console.warn('lost message', msg);
    }

    return Promise.all(ps).then(rs => {
        rs = rs.filter(r => !_void(r));
        return rs.length ? rs : null;
    });
}


function unsubscribe(obj, msg = null) {
    if (msg)
        _subs = _subs.filter(s => s[1] !== obj || s[0] !== msg);
    else
        _subs = _subs.filter(s => s[1] !== obj);
}

export default {subscribe, unsubscribe, publish};

