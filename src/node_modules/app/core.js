/// Framework boilerplate

import * as Redux from 'redux';
import * as ReactRedux from 'react-redux';

let _store = null;
let _hooks = [];


// simplified version of
// https://github.com/gaearon/redux-thunk/blob/master/src/index.js

function _thunkMiddleware(store) {
    return function (next) {
        return function (action) {
            if (typeof action === 'function') {
                return action();
            }
            return next(action);
        }
    }
}

function _reducer(state, action) {

    let type = action.type,
        args = action.args || {};

    if (type === 'set') {
        return Object.assign({}, state, args);
    }

    let hooks = _hooks.filter(h => h[0] === 'reducer' && h[1] === type);

    if (!hooks.length) {
        return state;
    }

    return hooks.reduce((s, h) =>
        Object.assign({}, s, h[3](s, args)),
        state);
}

function store() {
    if (!_store) {
        _store = Redux.createStore(
            _reducer,
            {},
            Redux.applyMiddleware(_thunkMiddleware));
    }
    return _store;
}

function perform(type, args) {
    let hooks = _hooks.filter(h => h[0] === 'action' && h[1] === type);
    if (!hooks.length)
        return _store.dispatch({type, args});
    hooks.forEach(h => _store.dispatch(() => h[3](args)));
}

function set(args) {
    perform('set', args);
}

function get(key) {
    return (_store.getState() || {})[key];
}

function connect(klass, props = []) {
    let mapper = Array.isArray(props) ?
        state => props.reduce((res, p) => ({...res, [p]: state[p]}), {}) :
        state => Object.keys(props).reduce((res, k) => ({...res, [k]: state[props[k]]}), {});

    return ReactRedux.connect(mapper)(klass);
}


class Plugin {

    init() {

    }

    action(type, fn) {
        _hooks.push(['action', type, this, fn]);
    }

    reducer(type, fn) {
        _hooks.push(['reducer', type, this, fn]);
    }

    deinit() {
        _hooks = _hooks.filter(h => h[2] !== this);
    }
}

export default {
    Plugin,
    store,
    get,
    set,
    connect,
    perform
}