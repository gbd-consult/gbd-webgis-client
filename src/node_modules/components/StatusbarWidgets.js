import React from 'react';

import CircularProgress from 'material-ui/CircularProgress';
import Slider from 'material-ui/Slider';
import Dialog from 'material-ui/Dialog';

import app from 'app';

export class Group extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.group')}>{this.props.children}</div>
        );
    }
}

export class Input extends React.Component {
    render() {
        let style = {
            ...app.theme('gwc.ui.statusbar.input'),
            width: this.props.width || 150
        };

        return (
            <input {...this.props} style={style}/>
        );
    }
}

export class Label extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.label')}><span>{this.props.value}</span></div>
        );
    }
}

export class Separator extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.separator')}>|</div>
        );
    }
}

export class Flex extends React.Component {
    render() {
        return <div style={{flex: 1}}/>
    }
}

export class Progress extends React.Component {
    render() {
        return (
            <Group>
                <CircularProgress size={20}/>
            </Group>
        )
    }
}

export class SmallSlider extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.sliderContainer')}>
                <Slider
                    {...this.props}
                    style={app.theme('gwc.ui.statusbar.sliderStyle')}
                    sliderStyle={app.theme('gwc.ui.statusbar.sliderSliderStyle')}

                />
            </div>
        );
    }


}

export class Link extends React.Component {
    render() {
        if (this.props.mode === 'popup') {
            return (
                <LinkDialog {...this.props}/>
            );
        }
        if (this.props.mode === 'blank') {
            return (
                <LinkBlank {...this.props}/>
            );
        }
        return (
            <span
                style={app.theme('gwc.ui.statusbar.link')}
            >
                {this.props.text}
            </span>
        );
    }
}

class LinkBlank extends React.Component {
    render() {
        return (
            <a
                href={this.props.href}
                style={app.theme('gwc.ui.statusbar.link')}
                target='blank'
            >
                {this.props.text}
            </a>
        );
    }
}

class LinkDialog extends React.Component {
    constructor(props){
        super(props)
        this.state = {
            open : false,
        };
    }
    
    handleOpen() {
        this.setState({open: true});
    }

    handleClose() {
        this.setState({open: false});
    }

    render() {
        let iFrameStyle = { height : '100%', width : '100%', border : 'none'},
            dialogStyle = {
                height : '90%', width : '70%',
                maxWidth : 'none', maxHeight: 'none'
            };
        return (
            <div>
                <Dialog
                    contentStyle = {dialogStyle}
                    title={this.props.text}
                    open={this.state.open}
                    onRequestClose={() => this.handleClose()}
                >
                    <iframe src={this.props.href} style={iFrameStyle}/>
                </Dialog>
                <span
                    style={app.theme('gwc.ui.statusbar.link')}
                    onClick={() => this.handleOpen()}
                >
                    {this.props.text}
                </span>
            </div>
        );
    }
}

