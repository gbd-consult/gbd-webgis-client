import React from 'react';

import CircularProgress from 'material-ui/CircularProgress';
import Slider from 'material-ui/Slider';

import _ from 'lodash';

import htmlToReact from 'html-to-react';

import app from 'app';

export class Group extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.group')}>{this.props.children}</div>
        );
    }
}

export class Input extends React.Component {
    constructor(props) {
        super(props);
        this.state = {value: props.value};
        this.delayedOnChange = _.debounce((evt, val) => this.props.onChange(evt, val), 500);
    }

    onKeyDown(evt) {
        if (this.props.changeOnEnter && evt.key === 'Enter') {
            return this.props.onChange(evt, evt.target.value);
        }

        if (this.props.step && (evt.key === 'ArrowUp' || evt.key === 'ArrowDown')) {
            let val = (Number(evt.target.value) || 0)
                + (evt.key === 'ArrowUp' ? +this.props.step : -this.props.step);
            this.setState({value: val});
            this.delayedOnChange(evt, val);
        }
    }

    onChange(evt) {
        this.setState({value: evt.target.value});
        if (!this.props.changeOnEnter)
            return this.props.onChange(evt, evt.target.value);
    }

    componentWillReceiveProps(props) {
        this.setState({value: props.value})
    }

    render() {
        let props = {
            style: {
                ...app.theme('gwc.ui.statusbar.input'),
                width: this.props.width || 150,
            },
            onChange: (evt) => this.onChange(evt),
            onKeyDown: (evt) => this.onKeyDown(evt),
            value: this.state.value
        };

        return (
            <input {...props}/>
        );
    }
}

export class Label extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.label')}><span>{this.props.value}</span></div>
        );
    }
}

export class Separator extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.separator')}>|</div>
        );
    }
}

export class Flex extends React.Component {
    render() {
        return <div style={{flex: 1}}/>
    }
}

export class Progress extends React.Component {
    render() {
        return (
            <Group>
                <CircularProgress size={20}/>
            </Group>
        )
    }
}

export class SmallSlider extends React.Component {
    render() {
        return (
            <div style={app.theme('gwc.ui.statusbar.sliderContainer')}>
                <Slider
                    {...this.props}
                    style={app.theme('gwc.ui.statusbar.sliderStyle')}
                    sliderStyle={app.theme('gwc.ui.statusbar.sliderSliderStyle')}

                />
            </div>
        );
    }


}

export class Link extends React.Component {
    async onClick() {
        let html = await app.http.get(this.props.href);
        let content = new htmlToReact.Parser().parse(html);
        app.perform('dialogShow', {content});
    }

    render() {
        let style = app.theme('gwc.ui.statusbar.link');

        if (this.props.target === 'blank') {
            return (
                <a
                    href={this.props.href}
                    target="_blank"
                    style={style}>{this.props.text}</a>
            );
        }

        if (this.props.target === 'popup') {
            return (
                <span
                    onClick={() => this.onClick()}
                    style={style}>{this.props.text}</span>
            );
        }

        return null;
    }
}

