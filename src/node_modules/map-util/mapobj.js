import ol from 'ol-all';
import proj4 from 'proj4/lib';

import loader from './loader';
import config from '../app/config';

const M_PER_PX = 0.0254 / 96;

function scaleToResolution(scale) {
    return scale * M_PER_PX;
}

function resolutionToScale(resolution) {
    return Math.round(resolution / M_PER_PX);
}

function initViewOptions() {
    // center is the only mandatory config option
    let opts = {
        center: config.object('map.center')
    };

    let projection = config.str('map.crs.client');
    if (projection)
        opts.projection = projection;

    let scales = config.object('map.scales');
    if (scales) {
        opts.minResolution = scaleToResolution(scales[0]);
        opts.maxResolution = scaleToResolution(scales[scales.length - 1]);
        opts.resolution = scaleToResolution(scales[scales.length >> 1]);
    } else {
        // if no scales, zoom must be given
        opts.zoom = config.number('map.zoom') || 10;
    }

    let extent = config.object('map.extent');
    if (extent) {
        opts.extent = extent;
    }

    return opts;
}


/**
 * @desc
 *
 * Wraps `ol.Map` and provides some useful utilities.
 *
 */
class TMap extends ol.Map {
    constructor() {
        ol.proj.setProj4(proj4);

        let defs = config.object('map.crs.defs');
        if (defs) {
            Object.keys(defs).forEach(d => proj4.defs(d, defs[d]));
        }

        super({
            controls: [],
            interactions: [],
            view: new ol.View(initViewOptions())
        });

        this.currentMode = null;
    }

    setScale(scale) {
        this.getView().setResolution(scaleToResolution(scale));
    }

    getScale() {
        return resolutionToScale(this.getView().getResolution())
    }


    async init(target) {
        await loader.load(this);

        this.setTarget(target);
        this.defaultMode();
        this.addControl(new ol.control.ScaleLine())

        this.changed();
        this.getView().changed();

    }

    setMode(name, cursor = null, interactions = null) {
        if (name === this.currentMode)
            return;

        if (!name) {
            cursor = 'default';
            interactions = [
                new ol.interaction.DragPan(),
                new ol.interaction.PinchZoom(),
                new ol.interaction.MouseWheelZoom(),
            ]
        }

        this.getInteractions().clear();
        for (let int of interactions)
            this.addInteraction(int);

        this.getTargetElement().style.cursor = cursor;
        this.currentMode = name;
    }

    defaultMode() {
        this.setMode('');
    }

    rootLayer() {
        return this.getLayerGroup();
    }

    getLayerById(uid) {
        let found = null;

        function _walk(layer) {
            if (found)
                return;

            if (ol.getUid(layer) === uid) {
                found = layer;
                return;
            }

            if (layer.getLayers) {
                layer.getLayers().forEach(sub => _walk(sub));
            }
        }

        _walk(this.rootLayer());
        return found;
    }

    enumLayers(startLayer) {
        let found = [];

        function _enum(layer) {
            found.push(layer);
            if (layer.getLayers)
                layer.getLayers().forEach(sub => _enum(sub));
        }

        _enum(startLayer || this.rootLayer());
        return found;
    }

}

export default TMap;
