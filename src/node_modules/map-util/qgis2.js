import axios from 'axios';
import ol from 'ol-all';

import config from '../app/config';

async function request(params) {
    let res = await axios.get(config.str('qgis2.server'), {
        params: Object.assign({}, params, {
            map: config.str('qgis2.map'),
            rnd: String(Math.random()).split('.')[1]
        })
    });
    return res.data;
}

function node2js(node) {
    if (node.nodeType === Node.TEXT_NODE) {
        return {tag: '_text', value: node.nodeValue};
    }

    let obj = {tag: node.nodeName || node.nodeType};

    if (node.attributes) {
        for (let attr of [...node.attributes])
            obj[attr.nodeName] = attr.nodeValue;
    }

    if (node.childNodes) {
        for (let cn of [...node.childNodes]) {
            let t = node2js(cn);
            obj[t.tag] = obj[t.tag] || [];
            obj[t.tag].push(t);
        }
    }

    return obj;


}

function get(obj, key) {
    let val = obj;
    for (let p of key.split('.')) {
        if (!(p in val)) {
            return null;
        }
        val = val[p];
    }
    return val;
}

function getExtent(elem) {
    for (let b of elem.BoundingBox) {
        if (b.CRS === config.str('map.crs.client')) {
            return [
                Number(b.minx),
                Number(b.miny),
                Number(b.maxx),
                Number(b.maxy)
            ]
        }
    }

}


function imgLoad(image, src) {
    //let u = new URL(src), s = u.searchParams;
    //console.log('loading', `${s.get('LAYERS')} -- ${s.get('WIDTH')}x${s.get('HEIGHT')} -- ${s.get('BBOX')}`)
    image.getImage().src = src;
}

function parseLayer(elem) {
    let opts = {
        visible: elem.visible ? elem.visible === '1' : true,
        name: get(elem, 'TreeName.0._text.0.value') || get(elem, 'Name.0._text.0.value'),
        projection: get(elem, 'CRS.1._text.0.value'),
    };

    if (elem.Layer) {
        return new ol.layer.Group({
            layers: elem.Layer.map(parseLayer).reverse()
        });
    }

    opts.source = new ol.source.ImageWMS({
        url: config.str('qgis2.server'),
        projection: opts.projection,
        params: {
            map: config.str('qgis2.map'),
            LAYERS: get(elem, 'Name.0._text.0.value')
        },
        ratio: 1,
        preload: 0,
        imageLoadFunction: imgLoad
    });

    return new ol.layer.Image(opts);
}


async function load(map) {

    let xml = await request({
        'SERVICE': 'WMS',
        'VERSION': '1.3',
        'REQUEST': 'GetProjectSettings'

    });

    let caps = node2js(ol.xml.parse(xml).firstChild);
    let la = parseLayer(get(caps, 'Capability.0.Layer.0'));

    return {
        rootLayer: la,
        extent: getExtent(get(caps, 'Capability.0.Layer.0'))
    }
}

export default {load};
