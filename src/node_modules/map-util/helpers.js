import ol from 'ol-all';
import intersect from '@turf/intersect';
import _ from 'lodash';

// use OGC's 1px = 0.28mm
// https://portal.opengeospatial.org/files/?artifact_id=14416 page 27
const M_PER_PX = 0.00028;

function scaleToResolution(scale) {
    return scale * M_PER_PX;
}

function resolutionToScale(resolution) {
    return Math.round(resolution / M_PER_PX);
}

function intersectingFeatures(features, geometry) {
    if (geometry.getType() === 'Circle') {
        geometry = ol.geom.Polygon.fromCircle(geometry);
    }

    let gj = new ol.format.GeoJSON();

    let filter = gj.writeGeometryObject(geometry);

    return features.filter(f => {
        let geom = gj.writeGeometryObject(f.getGeometry());
        try {
            return !!intersect(filter, geom);
        } catch (err) {
            // turf-intersection found non-noded intersection...
            return false;
        }
    })
}

function makeStyle(opts) {

    return new ol.style.Style(_.mapValues(opts, (val, key) => {
        if (key === 'fill' && _.isPlainObject(val))
            return new ol.style.Fill(val);

        if (key === 'stroke' && _.isPlainObject(val))
            return new ol.style.Stroke(val);

        if (key === 'text' && _.isPlainObject(val))
            return new ol.style.Text(val);

        return val;
    }));

}

export default {
    intersectingFeatures,
    makeStyle,
    scaleToResolution,
    resolutionToScale
};
