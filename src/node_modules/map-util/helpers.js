import ol from 'ol-all';
import intersect from '@turf/intersect';
import _ from 'lodash';

function intersectingFeatures(features, geometry) {
    if (geometry.getType() === 'Circle') {
        geometry = ol.geom.Polygon.fromCircle(geometry);
    }

    let gj = new ol.format.GeoJSON();

    let filter = gj.writeGeometryObject(geometry);

    return features.filter(f => {
        let geom = gj.writeGeometryObject(f.getGeometry());
        try {
            return !!intersect(filter, geom);
        } catch (err) {
            // turf-intersection found non-noded intersection...
            return false;
        }
    })
}

function makeStyle(opts) {

    Object.keys(opts).forEach(key => {

        let val = opts[key];

        if (key === 'fill' && _.isPlainObject(val))
            opts[key] = new ol.style.Fill(val);

        if (key === 'stroke' && _.isPlainObject(val))
            opts[key] = new ol.style.Stroke(val);

        if (key === 'text' && _.isPlainObject(val))
            opts[key] = new ol.style.Text(val);
    });

    return new ol.style.Style(opts);
}

export default {
    intersectingFeatures,
    makeStyle
};
