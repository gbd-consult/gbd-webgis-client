import app from '../app';
import ol from 'ol-all';
import helpers from './helpers';

async function request(url, verb, params) {
    let res = await app.http.get(url, {
        service: 'WMS',
        version: '1.3',
        request: verb,
        ...params
    });
    return ol.xml.parse(res);
}

function children(el, tag) {
    return [...el.childNodes].filter(e => e.nodeName === tag);
}

function child(el, tag) {
    let cn = children(el, tag);
    if (cn.length !== 1)
        return null;
    return cn[0];
}

function get(el, tags) {
    for (let tag of tags.match(/\w+/g)) {
        if (!el)
            return null;
        el = child(el, tag);
    }

    return el;
}


function getText(el, path) {
    el = get(el, path);
    return el && el.firstChild ? el.firstChild.nodeValue : '';
}


function imgLoad(image, src) {
    //let u = new URL(src), s = u.searchParams;
    //console.log('loading', `${s.get('LAYERS')} -- ${s.get('WIDTH')}x${s.get('HEIGHT')} -- ${s.get('BBOX')}`)
    image.getImage().src = src;
}

function createLayer(opts) {

    if (opts.layers) {
        return new ol.layer.Group({
            ...opts,
            kind: 'wmsGroup',
            layers: [...opts.layers].reverse().map(createLayer)
        });
    }

    let source = new ol.source.ImageWMS({
        url: opts.url,
        params: {
            LAYERS: opts.wmsName
        },
        ratio: 1,
        preload: 0,
        imageLoadFunction: imgLoad
    });

    return new ol.layer.Image({
        ...opts,
        source,
        kind: 'wmsImage'
    });
}

async function enumLayers(url, doc) {

    function _enum(el, path) {
        let opts = {
            url: url,
            name: getText(el, 'Title'),
            wmsName: getText(el, 'Name'),
            wmsLegendURL: getText(el, 'Style LegendURL OnlineResource'),
        };

        opts.wmsPath = path + '.' + opts.wmsName;

        let minScale = getText(el, 'MinScaleDenominator');
        let maxScale = getText(el, 'MaxScaleDenominator');

        if (minScale)
            opts.minResolution = helpers.scaleToResolution(Number(minScale));

        if (maxScale)
            opts.maxResolution = helpers.scaleToResolution(Number(maxScale));

        let sub = children(el, 'Layer');

        if (sub.length) {
            opts.layers = sub.map(c => _enum(c, opts.wmsPath));
        }

        return opts;
    }

    let descDoc = await request(url, 'GetCapabilities');
    let roots = children(child(descDoc.firstChild, 'Capability'), 'Layer').map(c => _enum(c, ''));

    if (!roots.length) {
        return null;
    }

    if (roots.length === 1) {
        return roots[0];
    }

    return {
        url: url,
        name: 'root',
        wmsName: 'root',
        layers: roots
    }
}


async function getLayers(url) {
    let root = await enumLayers(url);
    return root ? createLayer(root) : null;
}


export default {
    getLayers,
    enumLayers
};
