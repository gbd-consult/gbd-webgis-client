import _ from 'lodash';
import request from './request';

function parseLayer(la, path) {
    let p = {
        queryable: _.get(la, '@attributes.queryable') !== '0',
        visible: _.get(la, '@attributes.visible') !== '0',
        name: _.get(la, 'Name.0.@text.0'),
        title: _.get(la, 'Title.0.@text.0'),
        crs: _.get(la, 'BoundingBox.0.@attributes.CRS'),
        boundingBox: [
            Number(_.get(la, 'BoundingBox.0.@attributes.minx')),
            Number(_.get(la, 'BoundingBox.0.@attributes.miny')),
            Number(_.get(la, 'BoundingBox.0.@attributes.maxx')),
            Number(_.get(la, 'BoundingBox.0.@attributes.maxy')),
        ],
        legendURL: _.get(la, 'Style.0.LegendURL.0.OnlineResource.0.@attributes.href'),
        minScale: Number(_.get(la, 'MinScaleDenominator.0.@text.0')),
        maxScale: Number(_.get(la, 'MaxScaleDenominator.0.@text.0')),
    };

    p._pathName = path + '/' + p.name;

    if (la.Layer) {
        p.layers = la.Layer.map(sub => parseLayer(sub, p._pathName));
    }

    return p;
}


async function load(url, params, verb) {
    let js = await request.getJs(url, verb || 'GetCapabilities', params);
    return {
        service: js.Service || {},
        request: {
            'GetMap': _.get(js,
                'Capability.0.Request.0.GetMap.0.DCPType.0.HTTP.0.Get.0.OnlineResource.0.@attributes.href')
        },
        layers: _.get(js, 'Capability.0.Layer', []).map(la => parseLayer(la, ''))
    }
}

export default {
    load
};