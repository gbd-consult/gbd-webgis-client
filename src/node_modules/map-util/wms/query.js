import ol from 'ol-all';
import request from './request';

function readFeature(node, dataProjection, featureProjection) {
    let props = {};

    [...node.querySelectorAll('Attribute')].forEach(a =>
        props[a.getAttribute('name')] = a.getAttribute('value'));

    if (props.geometry) {
        props.geometry = new ol.format.WKT().readGeometry(props.geometry, {
            dataProjection,
            featureProjection
        })
    }

    let feature = new ol.Feature(props);
    feature.setId(node.getAttribute('id'));

    return feature;
}

const BBOX_OFFSET = 100;

async function run(map, {url, params, crs, coordinate, layerNames, layerTitles, limit = 100}) {

    let clientCrs = map.getView().getProjection(),
        pixel = map.getPixelFromCoordinate(coordinate);

    let a = map.getCoordinateFromPixel([pixel[0] - BBOX_OFFSET, pixel[1] - BBOX_OFFSET])
    let b = map.getCoordinateFromPixel([pixel[0] + BBOX_OFFSET, pixel[1] + BBOX_OFFSET])

    let bbox = [
        Math.min(a[0], b[0]),
        Math.min(a[1], b[1]),
        Math.max(a[0], b[0]),
        Math.max(a[1], b[1]),
    ];

    bbox = ol.proj.transformExtent(bbox, clientCrs, crs);

    let doc = await request.getXML(url, 'GetFeatureInfo', {
        ...params,
        crs,
        feature_count: limit,
        info_format: 'text/xml',
        bbox: bbox.join(','),
        i: BBOX_OFFSET,
        j: BBOX_OFFSET,
        width: BBOX_OFFSET * 2,
        height: BBOX_OFFSET * 2,
        query_layers: layerNames.join(','),
        fi_point_tolerance: 16,
        fi_line_tolerance: 8,
        fi_polygon_tolerance: 4,
    });

    let flist = [];

    [...doc.querySelectorAll('Layer')].forEach(layer => {
        let name = layer.getAttribute('name');

        [...layer.querySelectorAll('Feature')].forEach(feature => {
            let f = readFeature(feature, crs, clientCrs);
            f.set('_layerName', name);
            f.set('_layerTitle', layerTitles[layerNames.indexOf(name)] || name);
            flist.push(f);
        });
    });

    return flist;
}

export default {
    run
}